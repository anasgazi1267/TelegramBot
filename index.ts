
import TelegramBot from 'node-telegram-bot-api';
import * as fs from 'fs';
import * as path from 'path';

// Bot Configuration - AnasCP Bot
const BOT_TOKEN = '7887918168:AAEpThFn3nIzg62w16hQwp43Lo-FXFRSwWw';
const ADMIN_ID = 7391363898;
const BOT_USERNAME = '@task_cpbot';
const BOT_NAME = 'AnasCP';

const REQUIRED_CHANNELS = [
  'https://t.me/AnasEarnHunter',
  'https://t.me/ExpossDark', 
  'https://t.me/Anas_Promotion',
  'https://t.me/givwas'
];

// Constants
const CONFIG = {
  REF_BONUS: 0.02,
  PLATFORM_FEE: 0.20,
  MIN_CPC: 0.005,
  MAX_CPC: 0.100,
  MIN_DEPOSIT: 0.2,
  MAX_DEPOSIT: 1000,
  MIN_WITHDRAW: 5.0,
  MAX_WITHDRAW: 500,
  CURRENCY: 'USDT',
  BINANCE_PAY_ID: '787819330',
  PAYEER_ID: 'P1102512228',
  BOT_USERNAME: '@task_cpbot',
  BOT_NAME: 'AnasCP'
};

// Data storage
let users: any = {};
let tasks: any = {};
let withdrawals: any = {};
let deposits: any = {};
let advertisements: any = {};
let userStates: any = {};

// Load data
const loadData = () => {
  try {
    if (fs.existsSync('users.json')) users = JSON.parse(fs.readFileSync('users.json', 'utf8'));
    if (fs.existsSync('tasks.json')) tasks = JSON.parse(fs.readFileSync('tasks.json', 'utf8'));
    if (fs.existsSync('withdrawals.json')) withdrawals = JSON.parse(fs.readFileSync('withdrawals.json', 'utf8'));
    if (fs.existsSync('deposits.json')) deposits = JSON.parse(fs.readFileSync('deposits.json', 'utf8'));
    if (fs.existsSync('advertisements.json')) advertisements = JSON.parse(fs.readFileSync('advertisements.json', 'utf8'));
  } catch (error) {
    console.log('Starting with fresh data files...');
  }
};

// Save data
const saveData = () => {
  fs.writeFileSync('users.json', JSON.stringify(users, null, 2));
  fs.writeFileSync('tasks.json', JSON.stringify(tasks, null, 2));
  fs.writeFileSync('withdrawals.json', JSON.stringify(withdrawals, null, 2));
  fs.writeFileSync('deposits.json', JSON.stringify(deposits, null, 2));
  fs.writeFileSync('advertisements.json', JSON.stringify(advertisements, null, 2));
};

// Initialize bot
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Check channel membership
const checkChannelMembership = async (userId: number): Promise<boolean> => {
  try {
    for (const channel of REQUIRED_CHANNELS) {
      const channelUsername = channel.replace('https://t.me/', '@');
      const member = await bot.getChatMember(channelUsername, userId);
      if (member.status === 'left' || member.status === 'kicked') {
        return false;
      }
    }
    return true;
  } catch (error) {
    console.log(`Error checking membership for user ${userId}:`, error);
    return false;
  }
};

// Generate referral link
const generateReferralLink = (userId: number): string => {
  return `https://t.me/task_cpbot?start=${userId}`;
};

// Main keyboard
const getMainKeyboard = () => {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'ЁЯТ░ Balance', callback_data: 'balance' },
          { text: 'ЁЯСе Referrals', callback_data: 'referrals' }
        ],
        [
          { text: 'ЁЯМР Visit Sites', callback_data: 'visit_sites' },
          { text: 'ЁЯСе Join Channels', callback_data: 'join_channels' }
        ],
        [
          { text: 'ЁЯдЦ Join Bots', callback_data: 'join_bots' },
          { text: 'ЁЯШД More Tasks', callback_data: 'more_tasks' }
        ],
        [
          { text: 'ЁЯУК Advertise ЁЯУК', callback_data: 'advertise' }
        ],
        [
          { text: 'ЁЯТ│ Deposit', callback_data: 'deposit' },
          { text: 'ЁЯПз Withdraw', callback_data: 'withdraw' }
        ],
        [
          { text: 'тД╣я╕П Info', callback_data: 'info' },
          { text: 'ЁЯОБ Daily Bonus', callback_data: 'daily_bonus' }
        ]
      ]
    }
  };
};

// Advertise keyboard
const getAdvertiseKeyboard = () => {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'ЁЯСе Channel Members', callback_data: 'ad_channel_members' },
          { text: 'ЁЯТм Group Members', callback_data: 'ad_group_members' }
        ],
        [
          { text: 'ЁЯдЦ Bot Members', callback_data: 'ad_bot_members' },
          { text: 'ЁЯФЧ Site Visits', callback_data: 'ad_site_visits' }
        ],
        [
          { text: 'ЁЯУК Post Views', callback_data: 'ad_post_views' },
          { text: 'ЁЯРж Twitter Tasks', callback_data: 'ad_twitter' }
        ],
        [
          { text: 'ЁЯУ▒ YouTube Views', callback_data: 'ad_youtube' },
          { text: 'ЁЯТО Premium Ads', callback_data: 'ad_premium' }
        ],
        [
          { text: 'ЁЯУИ My Ads', callback_data: 'my_ads' },
          { text: 'ЁЯФЩ Back', callback_data: 'back_to_main' }
        ]
      ]
    }
  };
};

// Deposit methods keyboard
const getDepositMethodsKeyboard = () => {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'ЁЯЯб Binance Pay', callback_data: 'deposit_binance' },
          { text: 'ЁЯФ╡ Payeer', callback_data: 'deposit_payeer' }
        ],
        [
          { text: 'ЁЯТ│ Other Methods', callback_data: 'deposit_other' }
        ],
        [
          { text: 'ЁЯФЩ Back', callback_data: 'back_to_main' }
        ]
      ]
    }
  };
};

// Withdraw methods keyboard
const getWithdrawMethodsKeyboard = () => {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'ЁЯЯб Binance Pay', callback_data: 'withdraw_binance' },
          { text: 'ЁЯФ╡ Payeer', callback_data: 'withdraw_payeer' }
        ],
        [
          { text: 'ЁЯТ│ Bank Transfer', callback_data: 'withdraw_bank' }
        ],
        [
          { text: 'ЁЯФЩ Back', callback_data: 'back_to_main' }
        ]
      ]
    }
  };
};

// Admin panel keyboard
const getAdminKeyboard = () => {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'ЁЯСе Total Users', callback_data: 'admin_users' },
          { text: 'ЁЯТ│ Deposits', callback_data: 'admin_deposits' }
        ],
        [
          { text: 'ЁЯПз Withdrawals', callback_data: 'admin_withdrawals' },
          { text: 'ЁЯУв Broadcast', callback_data: 'admin_broadcast' }
        ],
        [
          { text: 'ЁЯУК Advertisements', callback_data: 'admin_ads' },
          { text: 'тЪЩя╕П Settings', callback_data: 'admin_settings' }
        ],
        [
          { text: 'ЁЯУК Statistics', callback_data: 'admin_stats' },
          { text: 'ЁЯТ░ Add Balance', callback_data: 'admin_add_balance' }
        ]
      ]
    }
  };
};

// Handle /start command
bot.onText(/\/start(.*)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id!;
  const username = msg.from?.username || '';
  const firstName = msg.from?.first_name || 'User';
  
  // Check if user joined required channels
  const hasJoined = await checkChannelMembership(userId);
  
  if (!hasJoined) {
    const joinMessage = `ЁЯФР рж╕рзНржмрж╛ржЧрждржо ${CONFIG.BOT_NAME} ржмржЯрзЗ!\n\n` +
      `ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ рзкржЯрж┐ ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рждрзЗ рж╣ржмрзЗ:\n\n` +
      `1я╕ПтГг ${REQUIRED_CHANNELS[0]}\n` +
      `2я╕ПтГг ${REQUIRED_CHANNELS[1]}\n` +
      `3я╕ПтГг ${REQUIRED_CHANNELS[2]}\n` +
      `4я╕ПтГг ${REQUIRED_CHANNELS[3]}\n\n` +
      `рж╕ржм ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рж╛рж░ ржкрж░ /start ржЪрж╛ржкрзБржиред`;
    
    return bot.sendMessage(chatId, joinMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'тЬЕ Membership Check', callback_data: 'check_membership' }]
        ]
      }
    });
  }

  // Handle referral
  const referralCode = match?.[1]?.trim();
  let referrerId = null;
  
  if (referralCode && referralCode !== userId.toString()) {
    referrerId = parseInt(referralCode);
  }

  // Register or update user
  if (!users[userId]) {
    users[userId] = {
      id: userId,
      username,
      firstName,
      balance: 0,
      referrals: 0,
      referrerId,
      joinedAt: new Date().toISOString(),
      totalEarned: 0,
      tasksCompleted: 0,
      completedTasks: [],
      totalDeposited: 0,
      totalWithdrawn: 0,
      adsCreated: 0,
      isActive: true,
      lastDailyBonus: null,
      totalReferralEarned: 0
    };

    // Give referral bonus
    if (referrerId && users[referrerId]) {
      users[referrerId].balance += CONFIG.REF_BONUS;
      users[referrerId].referrals += 1;
      users[referrerId].totalEarned += CONFIG.REF_BONUS;
      users[referrerId].totalReferralEarned += CONFIG.REF_BONUS;
      
      // Notify referrer
      bot.sendMessage(referrerId, 
        `ЁЯОЙ ржирждрзБржи рж░рзЗржлрж╛рж░рзЗрж▓ ржЬржпрж╝рзЗржи!\n\n` +
        `ЁЯСд ${firstName} ржЖржкржирж╛рж░ рж▓рж┐ржВржХ ржжрж┐ржпрж╝рзЗ ржпрзЛржЧ ржжрж┐ржпрж╝рзЗржЫрзЗ\n` +
        `ЁЯТ░ ржЖржкржирж┐ ${CONFIG.REF_BONUS} ${CONFIG.CURRENCY} ржмрзЛржирж╛рж╕ ржкрзЗржпрж╝рзЗржЫрзЗржи!\n\n` +
        `ЁЯФЧ ржЖрж░рзЛ рж░рзЗржлрж╛рж░ ржХрж░рзБржи ржПржмржВ ржЖржпрж╝ ржмрж╛ржбрж╝рж╛ржи!`);

      // Notify admin
      const adminNotification = `ЁЯЖХ ржирждрзБржи ржЗржЙржЬрж╛рж░ ржЬржпрж╝рзЗржи!\n\n` +
        `ЁЯСд ржирж╛ржо: ${firstName}\n` +
        `ЁЯЖФ ID: ${userId}\n` +
        `ЁЯСе Username: @${username || 'ржирзЗржЗ'}\n` +
        `ЁЯУН рж░рзЗржлрж╛рж░рж╛рж░: ${users[referrerId].firstName} (${referrerId})\n` +
        `ЁЯТ░ рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕: ${CONFIG.REF_BONUS} ${CONFIG.CURRENCY}\n` +
        `ЁЯУЕ рж╕ржоржпрж╝: ${new Date().toLocaleString('bn-BD')}\n` +
        `ЁЯУК ржорзЛржЯ ржЗржЙржЬрж╛рж░: ${Object.keys(users).length}`;
      
      bot.sendMessage(ADMIN_ID, adminNotification);
    } else {
      // Notify admin of new user without referrer
      const adminNotification = `ЁЯЖХ ржирждрзБржи ржЗржЙржЬрж╛рж░ ржЬржпрж╝рзЗржи!\n\n` +
        `ЁЯСд ржирж╛ржо: ${firstName}\n` +
        `ЁЯЖФ ID: ${userId}\n` +
        `ЁЯСе Username: @${username || 'ржирзЗржЗ'}\n` +
        `ЁЯУН ржХрзЛржи рж░рзЗржлрж╛рж░рж╛рж░ ржирзЗржЗ\n` +
        `ЁЯУЕ рж╕ржоржпрж╝: ${new Date().toLocaleString('bn-BD')}\n` +
        `ЁЯУК ржорзЛржЯ ржЗржЙржЬрж╛рж░: ${Object.keys(users).length}`;
      
      bot.sendMessage(ADMIN_ID, adminNotification);
    }

    saveData();
  }

  const welcomeMessage = `ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо ${firstName}!\n` +
    `ЁЯТО ${CONFIG.BOT_NAME} CPC ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо\n\n` +
    `ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
    `ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓: ${users[userId].referrals} ржЬржи\n` +
    `ЁЯОп рж╕ржорзНржкржирзНржи ржЯрж╛рж╕рзНржХ: ${users[userId].tasksCompleted}ржЯрж┐\n\n` +
    `ЁЯЪА рж╕рж╣ржЬ ржЙржкрж╛ржпрж╝рзЗ ржЯрж╛ржХрж╛ ржЖржпрж╝ ржХрж░рзБржи:\n\n` +
    `ЁЯМР Visit Sites - рж╕рж╛ржЗржЯ ржнрж┐ржЬрж┐ржЯ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи\n` +
    `ЁЯСе Join Channels - ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи\n` +
    `ЁЯдЦ Join Bots - ржмржЯ ржЬржпрж╝рзЗржи ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи\n` +
    `ЁЯШД More Tasks - ржЖрж░рзЛ ржЯрж╛рж╕рзНржХ ржПржмржВ ржмрзЛржирж╛рж╕\n\n` +
    `ЁЯУК ржирж┐ржЬрзЗрж░ ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи ржПржмржВ ржмрзНржпржмрж╕рж╛ ржмрж╛ржбрж╝рж╛ржи!\n\n` +
    `тД╣я╕П рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп /help ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи`;

  bot.sendMessage(chatId, welcomeMessage, getMainKeyboard());
});

// Handle admin command
bot.onText(/\/admin/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id!;

  if (userId !== ADMIN_ID) {
    return bot.sendMessage(chatId, 'тЭМ рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржбржорж┐ржи ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред');
  }

  const totalUsers = Object.keys(users).length;
  const activeUsers = Object.values(users).filter((u: any) => u.isActive).length;
  const totalBalance = Object.values(users).reduce((sum: number, u: any) => sum + u.balance, 0);
  const pendingDeposits = Object.values(deposits).filter((d: any) => d.status === 'pending').length;
  const pendingWithdrawals = Object.values(withdrawals).filter((w: any) => w.status === 'pending').length;
  const activeAds = Object.values(advertisements).filter((a: any) => a.status === 'active').length;

  const adminMessage = `ЁЯСС ${CONFIG.BOT_NAME} ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓\n\n` +
    `ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:\n` +
    `ЁЯСе ржорзЛржЯ ржЗржЙржЬрж╛рж░: ${totalUsers}\n` +
    `тЬЕ рж╕ржХрзНрж░рж┐ржпрж╝ ржЗржЙржЬрж╛рж░: ${activeUsers}\n` +
    `ЁЯТ░ ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${totalBalance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
    `ЁЯТ│ ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ: ${pendingDeposits}\n` +
    `ЁЯПз ржкрзЗржирзНржбрж┐ржВ ржЙржЗржержбрзНрж░: ${pendingWithdrawals}\n` +
    `ЁЯУв рж╕ржХрзНрж░рж┐ржпрж╝ ржмрж┐ржЬрзНржЮрж╛ржкржи: ${activeAds}\n\n` +
    `ЁЯдЦ ржмржЯ: ${CONFIG.BOT_USERNAME}\n` +
    `ЁЯСС ржПржбржорж┐ржи ID: ${ADMIN_ID}`;

  bot.sendMessage(chatId, adminMessage, getAdminKeyboard());
});

// Handle /help command
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = `ЁЯУЛ ${CONFIG.BOT_NAME} рж╕рж╛рж╣рж╛ржпрзНржп ржХрзЗржирзНржжрзНрж░\n\n` +
    `ЁЯФ░ ржорзВрж▓ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:\n` +
    `ЁЯТ░ Balance - ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрзЗржЦрзБржи\n` +
    `ЁЯСе Referrals - рж░рзЗржлрж╛рж░рзЗрж▓ рждржерзНржп ржжрзЗржЦрзБржи\n` +
    `ЁЯМР Visit Sites - рж╕рж╛ржЗржЯ ржнрж┐ржЬрж┐ржЯ ржЯрж╛рж╕рзНржХ\n` +
    `ЁЯСе Join Channels - ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржЯрж╛рж╕рзНржХ\n` +
    `ЁЯдЦ Join Bots - ржмржЯ ржЬржпрж╝рзЗржи ржЯрж╛рж╕рзНржХ\n` +
    `ЁЯУК Advertise - ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи\n` +
    `ЁЯТ│ Deposit - ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржЯрж╛ржХрж╛ ржЬржорж╛\n` +
    `ЁЯПз Withdraw - ржЯрж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржи\n\n` +
    `ЁЯТб ржЯрж┐ржкрж╕:\n` +
    `тАв ржкрзНрж░рждрж┐ржжрж┐ржи ржЯрж╛рж╕рзНржХ ржХрж░рзБржи\n` +
    `тАв ржмржирзНржзрзБржжрзЗрж░ рж░рзЗржлрж╛рж░ ржХрж░рзБржи\n` +
    `тАв ржирж┐ржпрж╝ржорж┐ржд ржбрзЗржЗрж▓рж┐ ржмрзЛржирж╛рж╕ ржирж┐ржи\n\n` +
    `ЁЯУЮ рж╕рж╛ржкрзЛрж░рзНржЯ: @Owner_Anas1\n` +
    `ЁЯМР ржЧрзНрж░рзБржк: @AnasEarnHunter`;

  bot.sendMessage(chatId, helpMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ЁЯПа Main Menu', callback_data: 'back_to_main' }]
      ]
    }
  });
});

// Handle callback queries
bot.on('callback_query', async (query) => {
  const chatId = query.message?.chat.id!;
  const userId = query.from.id;
  const data = query.data;
  
  if (!users[userId] && data !== 'check_membership') {
    return bot.answerCallbackQuery(query.id, { text: 'ржкрзНрж░ржержорзЗ /start ржжрж┐ржпрж╝рзЗ ржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи' });
  }

  try {
    switch (data) {
      case 'check_membership':
        const hasJoined = await checkChannelMembership(userId);
        if (hasJoined) {
          bot.answerCallbackQuery(query.id, { text: 'тЬЕ рж╕ржжрж╕рзНржпржкржж ржирж┐рж╢рзНржЪрж┐ржд!' });
          setTimeout(() => {
            bot.sendMessage(chatId, '/start');
          }, 1000);
        } else {
          bot.answerCallbackQuery(query.id, { text: 'тЭМ ржкрзНрж░ржержорзЗ рж╕ржм ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзБржи!' });
        }
        break;

      case 'balance':
        const balanceMessage = `ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рждржерзНржп\n\n` +
          `ЁЯТ╡ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯУИ ржорзЛржЯ ржЖржпрж╝: ${users[userId].totalEarned.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯУе ржорзЛржЯ ржЬржорж╛: ${users[userId].totalDeposited.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯУд ржорзЛржЯ ржЙрждрзНрждрзЛрж▓ржи: ${users[userId].totalWithdrawn.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓ ржЖржпрж╝: ${users[userId].totalReferralEarned?.toFixed(6) || '0.000000'} ${CONFIG.CURRENCY}\n` +
          `тЬЕ рж╕ржорзНржкржирзНржи ржЯрж╛рж╕рзНржХ: ${users[userId].tasksCompleted}\n` +
          `ЁЯУК рждрзИрж░рж┐ ржмрж┐ржЬрзНржЮрж╛ржкржи: ${users[userId].adsCreated}\n\n` +
          `ЁЯТб ржЖрж░рзЛ ржЖржпрж╝ ржХрж░рждрзЗ ржЯрж╛рж╕рзНржХ ржХрж░рзБржи ржмрж╛ ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи!`;
        
        bot.editMessageText(balanceMessage, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'ЁЯТ│ Deposit', callback_data: 'deposit' },
                { text: 'ЁЯПз Withdraw', callback_data: 'withdraw' }
              ],
              [
                { text: 'ЁЯУК Earning History', callback_data: 'earning_history' },
                { text: 'ЁЯОБ Daily Bonus', callback_data: 'daily_bonus' }
              ],
              [{ text: 'ЁЯФЩ Back', callback_data: 'back_to_main' }]
            ]
          }
        });
        break;

      case 'deposit':
        const depositMessage = `ЁЯТ│ ${CONFIG.CURRENCY} ржЬржорж╛ ржХрж░рзБржи\n\n` +
          `ЁЯУК ${CONFIG.BOT_NAME} ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржЯрж╛ржХрж╛ ржЬржорж╛ ржХрж░рзБржи\n\n` +
          `ЁЯТ░ рж╕рж░рзНржмржирж┐ржорзНржи ржЬржорж╛: ${CONFIG.MIN_DEPOSIT} ${CONFIG.CURRENCY}\n` +
          `ЁЯТ░ рж╕рж░рзНржмрзЛржЪрзНржЪ ржЬржорж╛: ${CONFIG.MAX_DEPOSIT} ${CONFIG.CURRENCY}\n\n` +
          `ЁЯПж ржЙржкрж▓ржмрзНржз ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐:\n\n` +
          `ЁЯЯб Binance Pay - рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржПржмржВ ржирж┐рж░рж╛ржкржж\n` +
          `ЁЯФ╡ Payeer - рж╕рж╣ржЬ ржПржмржВ ржжрзНрж░рзБржд\n` +
          `ЁЯТ│ Other Methods - ржЖрж░рзЛ ржЕржкрж╢ржи\n\n` +
          `тЪб рж╕рж╛ржзрж╛рж░ржгржд рзл-рззрзл ржорж┐ржирж┐ржЯрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝`;
        
        bot.editMessageText(depositMessage, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          ...getDepositMethodsKeyboard()
        });
        break;

      case 'deposit_binance':
        userStates[userId] = 'awaiting_deposit_amount_binance';
        bot.editMessageText(`ЁЯЯб Binance Pay ржЬржорж╛\n\n` +
          `ЁЯТ░ ржЬржорж╛рж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи (${CONFIG.MIN_DEPOSIT} - ${CONFIG.MAX_DEPOSIT} ${CONFIG.CURRENCY}):\n\n` +
          `ЁЯТб рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: 10.50)\n\n` +
          `тЪая╕П рж╕ржарж┐ржХ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи, ржПржЯрж╛ржЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ рж╣ржмрзЗред`, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `${CONFIG.MIN_DEPOSIT} ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_binance_${CONFIG.MIN_DEPOSIT}` },
                { text: `1 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_binance_1` }
              ],
              [
                { text: `5 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_binance_5` },
                { text: `10 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_binance_10` }
              ],
              [
                { text: `25 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_binance_25` },
                { text: `50 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_binance_50` }
              ],
              [{ text: 'ЁЯФЩ Back', callback_data: 'deposit' }]
            ]
          }
        });
        break;

      case 'deposit_payeer':
        userStates[userId] = 'awaiting_deposit_amount_payeer';
        bot.editMessageText(`ЁЯФ╡ Payeer ржЬржорж╛\n\n` +
          `ЁЯТ░ ржЬржорж╛рж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи (${CONFIG.MIN_DEPOSIT} - ${CONFIG.MAX_DEPOSIT} ${CONFIG.CURRENCY}):\n\n` +
          `ЁЯТб рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: 10.50)\n\n` +
          `тЪая╕П рж╕ржарж┐ржХ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи, ржПржЯрж╛ржЗ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ рж╣ржмрзЗред`, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `${CONFIG.MIN_DEPOSIT} ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_payeer_${CONFIG.MIN_DEPOSIT}` },
                { text: `1 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_payeer_1` }
              ],
              [
                { text: `5 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_payeer_5` },
                { text: `10 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_payeer_10` }
              ],
              [
                { text: `25 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_payeer_25` },
                { text: `50 ${CONFIG.CURRENCY}`, callback_data: `set_deposit_amount_payeer_50` }
              ],
              [{ text: 'ЁЯФЩ Back', callback_data: 'deposit' }]
            ]
          }
        });
        break;

      case 'withdraw':
        if (users[userId].balance < CONFIG.MIN_WITHDRAW) {
          bot.answerCallbackQuery(query.id, { 
            text: `тЭМ рж╕рж░рзНржмржирж┐ржорзНржи ржЙрждрзНрждрзЛрж▓ржи: ${CONFIG.MIN_WITHDRAW} ${CONFIG.CURRENCY}`,
            show_alert: true 
          });
        } else {
          const withdrawMsg = `ЁЯПз ${CONFIG.CURRENCY} ржЙрждрзНрждрзЛрж▓ржи\n\n` +
            `ЁЯУК ${CONFIG.BOT_NAME} ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо ржерзЗржХрзЗ ржЯрж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржи ржХрж░рзБржи\n\n` +
            `ЁЯТ░ ржЙржкрж▓ржмрзНржз: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
            `ЁЯТ░ рж╕рж░рзНржмржирж┐ржорзНржи: ${CONFIG.MIN_WITHDRAW} ${CONFIG.CURRENCY}\n` +
            `ЁЯТ░ рж╕рж░рзНржмрзЛржЪрзНржЪ: ${CONFIG.MAX_WITHDRAW} ${CONFIG.CURRENCY}\n\n` +
            `ЁЯПж ржЙржкрж▓ржмрзНржз ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐:\n\n` +
            `ЁЯЯб Binance Pay - ржжрзНрж░рзБржд ржкрзНрж░рж╕рзЗрж╕рж┐ржВ\n` +
            `ЁЯФ╡ Payeer - рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржкрзЗржорзЗржирзНржЯ\n` +
            `ЁЯТ│ Bank Transfer - ржмрзНржпрж╛ржВржХ ржЯрзНрж░рж╛ржирзНрж╕ржлрж╛рж░\n\n` +
            `тП░ рж╕рж╛ржзрж╛рж░ржгржд рзи-рзм ржШржирзНржЯрж╛ржпрж╝ ржкрзНрж░рж╕рзЗрж╕ рж╣ржпрж╝`;
          
          bot.editMessageText(withdrawMsg, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            ...getWithdrawMethodsKeyboard()
          });
        }
        break;

      case 'withdraw_binance':
        userStates[userId] = 'awaiting_withdraw_amount_binance';
        const maxWithdrawBinance = Math.min(CONFIG.MAX_WITHDRAW, users[userId].balance);
        bot.editMessageText(`ЁЯЯб Binance Pay ржЙрждрзНрждрзЛрж▓ржи\n\n` +
          `ЁЯТ░ ржЙржкрж▓ржмрзНржз: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯТ░ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи (${CONFIG.MIN_WITHDRAW} - ${maxWithdrawBinance.toFixed(6)} ${CONFIG.CURRENCY}):\n\n` +
          `ЁЯТб рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: 5.50)`, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `${CONFIG.MIN_WITHDRAW} ${CONFIG.CURRENCY}`, callback_data: `set_withdraw_amount_binance_${CONFIG.MIN_WITHDRAW}` },
                { text: `10 ${CONFIG.CURRENCY}`, callback_data: `set_withdraw_amount_binance_10` }
              ],
              [
                { text: `25 ${CONFIG.CURRENCY}`, callback_data: `set_withdraw_amount_binance_25` },
                { text: `50 ${CONFIG.CURRENCY}`, callback_data: `set_withdraw_amount_binance_50` }
              ],
              [
                { text: `рж╕ржм ржЙрждрзНрждрзЛрж▓ржи`, callback_data: `set_withdraw_amount_binance_${users[userId].balance}` }
              ],
              [{ text: 'ЁЯФЩ Back', callback_data: 'withdraw' }]
            ]
          }
        });
        break;

      case 'withdraw_payeer':
        userStates[userId] = 'awaiting_withdraw_amount_payeer';
        const maxWithdrawPayeer = Math.min(CONFIG.MAX_WITHDRAW, users[userId].balance);
        bot.editMessageText(`ЁЯФ╡ Payeer ржЙрждрзНрждрзЛрж▓ржи\n\n` +
          `ЁЯТ░ ржЙржкрж▓ржмрзНржз: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯТ░ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржкрж░рж┐ржорж╛ржг рж▓рж┐ржЦрзБржи (${CONFIG.MIN_WITHDRAW} - ${maxWithdrawPayeer.toFixed(6)} ${CONFIG.CURRENCY}):\n\n` +
          `ЁЯТб рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: 5.50)`, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                { text: `${CONFIG.MIN_WITHDRAW} ${CONFIG.CURRENCY}`, callback_data: `set_withdraw_amount_payeer_${CONFIG.MIN_WITHDRAW}` },
                { text: `10 ${CONFIG.CURRENCY}`, callback_data: `set_withdraw_amount_payeer_10` }
              ],
              [
                { text: `25 ${CONFIG.CURRENCY}`, callback_data: `set_withdraw_amount_payeer_25` },
                { text: `50 ${CONFIG.CURRENCY}`, callback_data: `set_withdraw_amount_payeer_50` }
              ],
              [
                { text: `рж╕ржм ржЙрждрзНрждрзЛрж▓ржи`, callback_data: `set_withdraw_amount_payeer_${users[userId].balance}` }
              ],
              [{ text: 'ЁЯФЩ Back', callback_data: 'withdraw' }]
            ]
          }
        });
        break;

      case 'advertise':
        bot.editMessageText(`ЁЯУК ${CONFIG.BOT_NAME} ржмрж┐ржЬрзНржЮрж╛ржкржи рж╕рж┐рж╕рзНржЯрзЗржо\n\n` +
          `ЁЯТО ржкрзНрж░ржлрзЗрж╢ржирж╛рж▓ CPC ржмрж┐ржЬрзНржЮрж╛ржкржи ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо\n\n` +
          `ЁЯОп ржЖржкржирж┐ ржХрзА ржкрзНрж░ржорзЛржЯ ржХрж░рждрзЗ ржЪрж╛ржи?\n\n` +
          `ЁЯТб ржХрж╛рж╕рзНржЯржо CPC рж░рзЗржЯ рж╕рзЗржЯ ржХрж░рзБржи (${CONFIG.MIN_CPC} - ${CONFIG.MAX_CPC} ${CONFIG.CURRENCY})\n` +
          `ЁЯУИ рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо ржкрж╛рж░ржлрж░ржорзЗржирзНрж╕ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ\n` +
          `ЁЯОп ржЯрж╛рж░рзНржЧрзЗржЯрзЗржб ржЕржбрж┐ржпрж╝рзЗржирзНрж╕ рж░рж┐ржЪ\n` +
          `ЁЯУК ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржирж╛рж▓рж┐ржЯрж┐ржХрзНрж╕\n\n` +
          `ЁЯЪА ржЖржкржирж╛рж░ ржмрзНржпржмрж╕рж╛ ржмрзГржжрзНржзрж┐ ржХрж░рзБржи ${CONFIG.BOT_NAME} ржПрж░ рж╕рж╛ржерзЗ!`, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          ...getAdvertiseKeyboard()
        });
        break;

      case 'visit_sites':
        // Generate site visiting tasks
        const availableSiteTasks = Object.values(advertisements).filter((ad: any) => 
          ad.status === 'active' && 
          ad.type === 'site_visits' && 
          ad.spentToday < ad.dailyBudget &&
          !users[userId].completedTasks.includes(ad.id)
        );

        if (availableSiteTasks.length === 0) {
          bot.editMessageText(`ЁЯМР рж╕рж╛ржЗржЯ ржнрж┐ржЬрж┐ржЯ ржЯрж╛рж╕рзНржХ\n\n` +
            `тЭМ ржмрж░рзНрждржорж╛ржирзЗ ржХрзЛржи рж╕рж╛ржЗржЯ ржнрж┐ржЬрж┐ржЯ ржЯрж╛рж╕рзНржХ ржирзЗржЗ!\n\n` +
            `ЁЯФД ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗржХ ржХрж░рзБржи\n` +
            `ЁЯУК ржЕржержмрж╛ ржирж┐ржЬрзЗрж░ рж╕рж╛ржЗржЯрзЗрж░ ржЬржирзНржп ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи`, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'тЮХ ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи', callback_data: 'ad_site_visits' }],
                [
                  { text: 'ЁЯФД Refresh', callback_data: 'visit_sites' },
                  { text: 'ЁЯФЩ Back', callback_data: 'back_to_main' }
                ]
              ]
            }
          });
        } else {
          const task = availableSiteTasks[Math.floor(Math.random() * availableSiteTasks.length)] as any;
          const siteTaskMessage = `ЁЯМР рж╕рж╛ржЗржЯ ржнрж┐ржЬрж┐ржЯ ржЯрж╛рж╕рзНржХ #${task.id}\n\n` +
            `ЁЯУЭ ржмрж┐ржмрж░ржг: ${task.description}\n` +
            `ЁЯФЧ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ: ${task.link}\n\n` +
            `ЁЯТ░ ржкрзБрж░рж╕рзНржХрж╛рж░: ${task.cpc.toFixed(6)} ${CONFIG.CURRENCY}\n` +
            `тП▒я╕П ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж╕ржоржпрж╝: рзйрзж рж╕рзЗржХрзЗржирзНржб\n\n` +
            `ЁЯУЛ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:\n` +
            `1я╕ПтГг "ЁЯМР Visit Website" ржмрж╛ржЯржи ржЪрж╛ржкрзБржи\n` +
            `2я╕ПтГг ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗ рзйрзж+ рж╕рзЗржХрзЗржирзНржб ржерж╛ржХрзБржи\n` +
            `3я╕ПтГг рж╕рж╛ржЗржЯржЯрж┐ ржмрзНрж░рж╛ржЙржЬ ржХрж░рзБржи\n` +
            `4я╕ПтГг "тЬЕ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи" ржЪрж╛ржкрзБржи\n\n` +
            `ЁЯОп ржЙржкрж▓ржмрзНржз ржЯрж╛рж╕рзНржХ: ${availableSiteTasks.length}ржЯрж┐`;
          
          bot.editMessageText(siteTaskMessage, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'тПня╕П Skip Task', callback_data: 'visit_sites' },
                  { text: 'ЁЯМР Visit Website', url: task.link }
                ],
                [{ text: 'тЬЕ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи', callback_data: `complete_task_${task.id}` }],
                [{ text: 'ЁЯФЩ Back', callback_data: 'back_to_main' }]
              ]
            }
          });
        }
        break;

      case 'info':
        const joinDate = new Date(users[userId].joinedAt);
        const referralLink = generateReferralLink(userId);
        const infoMessage = `ЁЯУК ржЖржкржирж╛рж░ ${CONFIG.BOT_NAME} ржкрзНрж░рзЛржлрж╛ржЗрж▓\n\n` +
          `ЁЯСд ржирж╛ржо: ${users[userId].firstName}\n` +
          `ЁЯЖФ ID: ${userId}\n` +
          `ЁЯСе ржЗржЙржЬрж╛рж░ржирзЗржо: @${users[userId].username || 'ржирзЗржЗ'}\n` +
          `ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓: ${users[userId].referrals} ржЬржи\n` +
          `ЁЯУИ ржорзЛржЯ ржЖржпрж╝: ${users[userId].totalEarned.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯТО рж░рзЗржлрж╛рж░рзЗрж▓ ржЖржпрж╝: ${users[userId].totalReferralEarned?.toFixed(6) || '0.000000'} ${CONFIG.CURRENCY}\n` +
          `тЬЕ рж╕ржорзНржкржирзНржи ржЯрж╛рж╕рзНржХ: ${users[userId].tasksCompleted}\n` +
          `ЁЯУК рждрзИрж░рж┐ ржмрж┐ржЬрзНржЮрж╛ржкржи: ${users[userId].adsCreated}\n` +
          `ЁЯУЕ ржпрзЛржЧржжрж╛ржи: ${joinDate.toLocaleDateString('bn-BD')}\n\n` +
          `ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░рзЗрж▓ рж▓рж┐ржВржХ:\n${referralLink}\n\n` +
          `ЁЯТб ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗрж▓рзЗ ${CONFIG.REF_BONUS} ${CONFIG.CURRENCY} ржмрзЛржирж╛рж╕!`;
        
        bot.editMessageText(infoMessage, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'ЁЯУд Share Link', switch_inline_query: `Join ${CONFIG.BOT_NAME} and earn money! ${referralLink}` },
                { text: 'ЁЯУЛ Copy Link', callback_data: 'copy_referral_link' }
              ],
              [
                { text: 'ЁЯУК Detailed Stats', callback_data: 'detailed_stats' },
                { text: 'ЁЯСе My Referrals', callback_data: 'my_referrals' }
              ],
              [{ text: 'ЁЯФЩ Back', callback_data: 'back_to_main' }]
            ]
          }
        });
        break;

      case 'daily_bonus':
        const today = new Date().toDateString();
        const lastBonus = users[userId].lastDailyBonus;
        
        if (lastBonus === today) {
          bot.answerCallbackQuery(query.id, { 
            text: 'тЭМ ржЖржЬржХрзЗрж░ ржбрзЗржЗрж▓рж┐ ржмрзЛржирж╛рж╕ ржирзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗ!',
            show_alert: true 
          });
        } else {
          const bonusAmount = 0.001; // 0.001 USDT daily bonus
          users[userId].balance += bonusAmount;
          users[userId].totalEarned += bonusAmount;
          users[userId].lastDailyBonus = today;
          saveData();
          
          bot.answerCallbackQuery(query.id, { 
            text: `ЁЯОБ ${bonusAmount} ${CONFIG.CURRENCY} ржбрзЗржЗрж▓рж┐ ржмрзЛржирж╛рж╕ ржкрзЗржпрж╝рзЗржЫрзЗржи!`,
            show_alert: true 
          });
          
          bot.editMessageText(`ЁЯОБ ржбрзЗржЗрж▓рж┐ ржмрзЛржирж╛рж╕ рж╕ржВржЧрзНрж░рж╣ рж╕ржлрж▓!\n\n` +
            `ЁЯТ░ ржмрзЛржирж╛рж╕: ${bonusAmount} ${CONFIG.CURRENCY}\n` +
            `ЁЯТО ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n\n` +
            `ЁЯУЕ ржЖржЧрж╛ржорзАржХрж╛рж▓ ржЖржмрж╛рж░ ржЖрж╕рзБржи ржирждрзБржи ржмрзЛржирж╛рж╕рзЗрж░ ржЬржирзНржп!\n\n` +
            `ЁЯТб ржЖрж░рзЛ ржЖржпрж╝ ржХрж░рждрзЗ ржЯрж╛рж╕рзНржХ ржХрж░рзБржи ржПржмржВ рж░рзЗржлрж╛рж░ ржХрж░рзБржиред`, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'ЁЯМР Visit Sites', callback_data: 'visit_sites' },
                  { text: 'ЁЯСе Referrals', callback_data: 'referrals' }
                ],
                [{ text: 'ЁЯФЩ Back', callback_data: 'back_to_main' }]
              ]
            }
          });
        }
        break;

      case 'back_to_main':
        const welcomeMessage = `ЁЯОЙ рж╕рзНржмрж╛ржЧрждржо ${users[userId].firstName}!\n` +
          `ЁЯТО ${CONFIG.BOT_NAME} CPC ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржорзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо\n\n` +
          `ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
          `ЁЯСе рж░рзЗржлрж╛рж░рзЗрж▓: ${users[userId].referrals} ржЬржи\n` +
          `ЁЯОп рж╕ржорзНржкржирзНржи ржЯрж╛рж╕рзНржХ: ${users[userId].tasksCompleted}ржЯрж┐\n\n` +
          `ЁЯЪА рж╕рж╣ржЬ ржЙржкрж╛ржпрж╝рзЗ ржЯрж╛ржХрж╛ ржЖржпрж╝ ржХрж░рзБржи:\n\n` +
          `ЁЯМР Visit Sites - рж╕рж╛ржЗржЯ ржнрж┐ржЬрж┐ржЯ ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи\n` +
          `ЁЯСе Join Channels - ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи\n` +
          `ЁЯдЦ Join Bots - ржмржЯ ржЬржпрж╝рзЗржи ржХрж░рзЗ ржЖржпрж╝ ржХрж░рзБржи\n` +
          `ЁЯШД More Tasks - ржЖрж░рзЛ ржЯрж╛рж╕рзНржХ ржПржмржВ ржмрзЛржирж╛рж╕\n\n` +
          `ЁЯУК ржирж┐ржЬрзЗрж░ ржмрж┐ржЬрзНржЮрж╛ржкржи рждрзИрж░рж┐ ржХрж░рзБржи ржПржмржВ ржмрзНржпржмрж╕рж╛ ржмрж╛ржбрж╝рж╛ржи!`;

        bot.editMessageText(welcomeMessage, {
          chat_id: chatId,
          message_id: query.message?.message_id,
          ...getMainKeyboard()
        });
        break;

      // Admin callbacks
      case 'admin_deposits':
        if (userId !== ADMIN_ID) return bot.answerCallbackQuery(query.id, { text: 'ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржирзЗржЗ' });
        
        const pendingDeposits = Object.values(deposits).filter((d: any) => d.status === 'pending');
        if (pendingDeposits.length === 0) {
          bot.editMessageText(`ЁЯТ│ ржкрзЗржирзНржбрж┐ржВ ржбрж┐ржкрзЛржЬрж┐ржЯ ржирзЗржЗ\n\nЁЯУК ${CONFIG.BOT_NAME} ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓`, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'ЁЯФД Refresh', callback_data: 'admin_deposits' }],
                [{ text: 'ЁЯФЩ Back', callback_data: 'admin_back' }]
              ]
            }
          });
        } else {
          const deposit = pendingDeposits[0] as any;
          const user = users[deposit.userId];
          bot.editMessageText(`ЁЯТ│ PENDING DEPOSIT #${deposit.id}\n\n` +
            `ЁЯСд User: ${user?.firstName || 'Unknown'} (@${user?.username || 'no username'})\n` +
            `ЁЯЖФ User ID: ${deposit.userId}\n` +
            `ЁЯТ░ Amount: ${deposit.amount} ${CONFIG.CURRENCY}\n` +
            `ЁЯТ│ Method: ${deposit.method}\n` +
            `ЁЯУЕ Date: ${new Date(deposit.createdAt).toLocaleString('bn-BD')}\n` +
            `ЁЯЖФ Deposit ID: ${deposit.id}\n` +
            `ЁЯУ╕ Proof: ${deposit.proof || 'Provided'}\n\n` +
            `ЁЯУК Remaining: ${pendingDeposits.length} deposits`, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'тЬЕ APPROVE', callback_data: `approve_deposit_${deposit.id}` },
                  { text: 'тЭМ REJECT', callback_data: `reject_deposit_${deposit.id}` }
                ],
                [
                  { text: 'ЁЯСд User Info', callback_data: `user_info_${deposit.userId}` },
                  { text: 'ЁЯУЭ Custom Amount', callback_data: `custom_deposit_${deposit.id}` }
                ],
                [{ text: 'ЁЯФЩ Back', callback_data: 'admin_back' }]
              ]
            }
          });
        }
        break;

      case 'admin_withdrawals':
        if (userId !== ADMIN_ID) return bot.answerCallbackQuery(query.id, { text: 'ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржирзЗржЗ' });
        
        const pendingWithdrawals = Object.values(withdrawals).filter((w: any) => w.status === 'pending');
        if (pendingWithdrawals.length === 0) {
          bot.editMessageText(`ЁЯПз ржкрзЗржирзНржбрж┐ржВ ржЙржЗржержбрзНрж░ржпрж╝рж╛рж▓ ржирзЗржЗ\n\nЁЯУК ${CONFIG.BOT_NAME} ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓`, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'ЁЯФД Refresh', callback_data: 'admin_withdrawals' }],
                [{ text: 'ЁЯФЩ Back', callback_data: 'admin_back' }]
              ]
            }
          });
        } else {
          const withdrawal = pendingWithdrawals[0] as any;
          const user = users[withdrawal.userId];
          bot.editMessageText(`ЁЯПз PENDING WITHDRAWAL #${withdrawal.id}\n\n` +
            `ЁЯСд User: ${user?.firstName || 'Unknown'} (@${user?.username || 'no username'})\n` +
            `ЁЯЖФ User ID: ${withdrawal.userId}\n` +
            `ЁЯТ░ Amount: ${withdrawal.amount} ${CONFIG.CURRENCY}\n` +
            `ЁЯТ│ Method: ${withdrawal.method}\n` +
            `ЁЯЖФ Payment ID: ${withdrawal.paymentId}\n` +
            `ЁЯУЕ Date: ${new Date(withdrawal.createdAt).toLocaleString('bn-BD')}\n` +
            `ЁЯТ░ User Balance: ${user?.balance.toFixed(6) || '0'} ${CONFIG.CURRENCY}\n\n` +
            `ЁЯУК Remaining: ${pendingWithdrawals.length} withdrawals`, {
            chat_id: chatId,
            message_id: query.message?.message_id,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'тЬЕ APPROVE', callback_data: `approve_withdrawal_${withdrawal.id}` },
                  { text: 'тЭМ REJECT', callback_data: `reject_withdrawal_${withdrawal.id}` }
                ],
                [
                  { text: 'ЁЯСд User Info', callback_data: `user_info_${withdrawal.userId}` },
                  { text: 'ЁЯУЛ Copy Payment ID', callback_data: `copy_payment_id_${withdrawal.id}` }
                ],
                [{ text: 'ЁЯФЩ Back', callback_data: 'admin_back' }]
              ]
            }
          });
        }
        break;

      case 'admin_back':
        if (userId !== ADMIN_ID) return;
        setTimeout(() => {
          bot.sendMessage(chatId, '/admin');
        }, 500);
        break;
    }

    // Handle quick deposit amount selection
    if (data.startsWith('set_deposit_amount_')) {
      const parts = data.split('_');
      const method = parts[3]; // binance or payeer
      const amount = parseFloat(parts[4]);
      
      if (amount >= CONFIG.MIN_DEPOSIT && amount <= CONFIG.MAX_DEPOSIT) {
        processDepositAmount(chatId, userId, amount, method, query.message?.message_id);
      }
    }

    // Handle quick withdraw amount selection
    if (data.startsWith('set_withdraw_amount_')) {
      const parts = data.split('_');
      const method = parts[3]; // binance or payeer
      const amount = parseFloat(parts[4]);
      
      if (amount >= CONFIG.MIN_WITHDRAW && amount <= Math.min(CONFIG.MAX_WITHDRAW, users[userId].balance)) {
        processWithdrawAmount(chatId, userId, amount, method, query.message?.message_id);
      }
    }

    // Handle task completion
    if (data.startsWith('complete_task_')) {
      const taskId = data.split('_')[2];
      const task = advertisements[taskId];
      
      if (task && task.status === 'active' && !users[userId].completedTasks.includes(taskId)) {
        // Add reward
        users[userId].balance += task.cpc;
        users[userId].totalEarned += task.cpc;
        users[userId].tasksCompleted += 1;
        users[userId].completedTasks.push(taskId);
        
        // Update ad stats
        advertisements[taskId].totalClicks += 1;
        advertisements[taskId].spentToday += task.cpc;
        
        // Give referral bonus to referrer
        if (users[userId].referrerId && users[users[userId].referrerId]) {
          const referralBonus = task.cpc * 0.20; // 20% referral bonus
          users[users[userId].referrerId].balance += referralBonus;
          users[users[userId].referrerId].totalEarned += referralBonus;
          users[users[userId].referrerId].totalReferralEarned += referralBonus;
          
          bot.sendMessage(users[userId].referrerId, 
            `ЁЯОЙ рж░рзЗржлрж╛рж░рзЗрж▓ ржмрзЛржирж╛рж╕!\n\n${users[userId].firstName} ржПржХржЯрж┐ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи ржХрж░рзЗржЫрзЗред\nЁЯТ░ ржЖржкржирж┐ ${referralBonus.toFixed(6)} ${CONFIG.CURRENCY} ржмрзЛржирж╛рж╕ ржкрзЗржпрж╝рзЗржЫрзЗржи!`);
        }
        
        saveData();
        
        bot.answerCallbackQuery(query.id, { 
          text: `тЬЕ ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи! ${task.cpc.toFixed(6)} ${CONFIG.CURRENCY} ржкрзЗржпрж╝рзЗржЫрзЗржи!`,
          show_alert: true 
        });

        // Notify advertiser
        if (task.userId && users[task.userId]) {
          bot.sendMessage(task.userId, 
            `ЁЯУИ ржЖржкржирж╛рж░ ржмрж┐ржЬрзНржЮрж╛ржкржирзЗ ржирждрзБржи ржХрзНрж▓рж┐ржХ!\n\n` +
            `ЁЯТ░ ржЦрж░ржЪ: ${task.cpc.toFixed(6)} ${CONFIG.CURRENCY}\n` +
            `ЁЯУК ржорзЛржЯ ржХрзНрж▓рж┐ржХ: ${advertisements[taskId].totalClicks}\n` +
            `ЁЯОп ржмрж┐ржЬрзНржЮрж╛ржкржи ID: ${taskId}`);
        }
      }
    }

    // Handle admin approval/rejection
    if (data.startsWith('approve_deposit_') || data.startsWith('reject_deposit_')) {
      if (userId !== ADMIN_ID) return;
      const depositId = data.split('_')[2];
      const action = data.split('_')[0];
      
      if (deposits[depositId]) {
        if (action === 'approve') {
          deposits[depositId].status = 'approved';
          deposits[depositId].approvedAt = new Date().toISOString();
          users[deposits[depositId].userId].balance += deposits[depositId].amount;
          users[deposits[depositId].userId].totalDeposited += deposits[depositId].amount;
          
          bot.sendMessage(deposits[depositId].userId, 
            `тЬЕ ржЖржкржирж╛рж░ ${deposits[depositId].amount} ${CONFIG.CURRENCY} ржЬржорж╛ ржЕржирзБржорзЛржжрж┐ржд!\n\n` +
            `ЁЯТ░ ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${users[deposits[depositId].userId].balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
            `ЁЯУЕ рж╕ржоржпрж╝: ${new Date().toLocaleString('bn-BD')}\n\n` +
            `ЁЯОЙ ржПржЦржи ржЯрж╛рж╕рзНржХ ржХрж░рзБржи ржПржмржВ ржЖржпрж╝ рж╢рзБрж░рзБ ржХрж░рзБржи!\n` +
            `ЁЯТО ${CONFIG.BOT_NAME} ржП ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо!`);
        } else {
          deposits[depositId].status = 'rejected';
          deposits[depositId].rejectedAt = new Date().toISOString();
          
          bot.sendMessage(deposits[depositId].userId, 
            `тЭМ ржЖржкржирж╛рж░ ${deposits[depositId].amount} ${CONFIG.CURRENCY} ржЬржорж╛ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржиред\n\n` +
            `ЁЯУЮ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржпрзЛржЧрж╛ржпрзЛржЧ: @Owner_Anas1\n` +
            `ЁЯТм ржЧрзНрж░рзБржк: @AnasEarnHunter`);
        }
        saveData();
        bot.answerCallbackQuery(query.id, { text: `Deposit ${action}d successfully` });
        
        // Show next pending deposit
        setTimeout(() => {
          bot.emit('callback_query', { ...query, data: 'admin_deposits' });
        }, 1000);
      }
    }

    if (data.startsWith('approve_withdrawal_') || data.startsWith('reject_withdrawal_')) {
      if (userId !== ADMIN_ID) return;
      const withdrawalId = data.split('_')[2];
      const action = data.split('_')[0];
      
      if (withdrawals[withdrawalId]) {
        if (action === 'approve') {
          withdrawals[withdrawalId].status = 'approved';
          withdrawals[withdrawalId].approvedAt = new Date().toISOString();
          users[withdrawals[withdrawalId].userId].totalWithdrawn += withdrawals[withdrawalId].amount;
          
          bot.sendMessage(withdrawals[withdrawalId].userId, 
            `тЬЕ ржЖржкржирж╛рж░ ${withdrawals[withdrawalId].amount} ${CONFIG.CURRENCY} ржЙрждрзНрждрзЛрж▓ржи ржЕржирзБржорзЛржжрж┐ржд!\n\n` +
            `ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржорзЗржержб: ${withdrawals[withdrawalId].method}\n` +
            `ЁЯЖФ ржкрзЗржорзЗржирзНржЯ ID: ${withdrawals[withdrawalId].paymentId}\n` +
            `ЁЯУЕ рж╕ржоржпрж╝: ${new Date().toLocaleString('bn-BD')}\n\n` +
            `ЁЯТ░ рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржкрзЗржорзЗржирзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗред\n` +
            `ЁЯТО ${CONFIG.BOT_NAME} ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп ржзржирзНржпржмрж╛ржж!`);
        } else {
          withdrawals[withdrawalId].status = 'rejected';
          withdrawals[withdrawalId].rejectedAt = new Date().toISOString();
          users[withdrawals[withdrawalId].userId].balance += withdrawals[withdrawalId].amount; // Refund
          
          bot.sendMessage(withdrawals[withdrawalId].userId, 
            `тЭМ ржЖржкржирж╛рж░ ${withdrawals[withdrawalId].amount} ${CONFIG.CURRENCY} ржЙрждрзНрждрзЛрж▓ржи ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржиред\n\n` +
            `ЁЯТ░ ржЯрж╛ржХрж╛ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржлрзЗрж░ржд ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред\n` +
            `ЁЯУЮ рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржпрзЛржЧрж╛ржпрзЛржЧ: @Owner_Anas1`);
        }
        saveData();
        bot.answerCallbackQuery(query.id, { text: `Withdrawal ${action}d successfully` });
        
        // Show next pending withdrawal
        setTimeout(() => {
          bot.emit('callback_query', { ...query, data: 'admin_withdrawals' });
        }, 1000);
      }
    }

  } catch (error) {
    console.error('Error handling callback query:', error);
    bot.answerCallbackQuery(query.id, { text: 'ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред' });
  }
});

// Function to process deposit amount
const processDepositAmount = (chatId: number, userId: number, amount: number, method: string, messageId?: number) => {
  const methodName = method === 'binance' ? 'Binance Pay' : 'Payeer';
  const paymentId = method === 'binance' ? CONFIG.BINANCE_PAY_ID : CONFIG.PAYEER_ID;
  
  userStates[userId] = `awaiting_deposit_proof_${method}_${amount}`;
  
  const message = `ЁЯТ│ ${CONFIG.BOT_NAME} - ${methodName} ржЬржорж╛\n\n` +
    `ЁЯТ░ ржкрж░рж┐ржорж╛ржг: ${amount} ${CONFIG.CURRENCY}\n` +
    `ЁЯЖФ ${methodName} ID: \`${paymentId}\`\n\n` +
    `ЁЯУЛ Deposit ${CONFIG.CURRENCY}\n` +
    `ЁЯТ░ Minimum: ${CONFIG.MIN_DEPOSIT} ${CONFIG.CURRENCY}\n\n` +
    `ЁЯПж Payment Methods:\n` +
    `ЁЯЯб ${methodName} ID: ${paymentId}\n\n` +
    `After payment, send screenshot with amount for verification.\n\n` +
    `ЁЯУ▒ ржзрж╛ржкрж╕ржорзВрж╣:\n` +
    `1я╕ПтГг ржЙржкрж░рзЗрж░ ID рждрзЗ ${amount} ${CONFIG.CURRENCY} ржкрж╛ржарж╛ржи\n` +
    `2я╕ПтГг ржкрзЗржорзЗржирзНржЯрзЗрж░ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржирж┐ржи\n` +
    `3я╕ПтГг рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржПржЦрж╛ржирзЗ ржкрж╛ржарж╛ржи\n\n` +
    `тЪая╕П ржкрж░рж┐ржорж╛ржг рж╣рзБржмрж╣рзБ ${amount} ${CONFIG.CURRENCY} рж╣рждрзЗ рж╣ржмрзЗ!\n` +
    `ЁЯХР рж╕рж╛ржзрж╛рж░ржгржд рзл-рззрзл ржорж┐ржирж┐ржЯрзЗ ржЕржирзБржорзЛржжржи`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: `ЁЯУЛ Copy ${methodName} ID`, callback_data: `copy_${method}_id` }],
        [{ text: 'ЁЯФЩ Back', callback_data: 'deposit' }],
        [{ text: 'тЭМ Cancel', callback_data: 'back_to_main' }]
      ]
    }
  };

  if (messageId) {
    bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown',
      ...keyboard
    });
  } else {
    bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }
};

// Function to process withdraw amount
const processWithdrawAmount = (chatId: number, userId: number, amount: number, method: string, messageId?: number) => {
  const methodName = method === 'binance' ? 'Binance Pay' : 'Payeer';
  
  userStates[userId] = `awaiting_withdraw_id_${method}_${amount}`;
  
  const message = `ЁЯПз ${CONFIG.BOT_NAME} - ${methodName} ржЙрждрзНрждрзЛрж▓ржи\n\n` +
    `ЁЯТ░ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржкрж░рж┐ржорж╛ржг: ${amount} ${CONFIG.CURRENCY}\n\n` +
    `ЁЯТ│ ржЖржкржирж╛рж░ ${methodName} ID рж▓рж┐ржЦрзБржи:\n\n` +
    `ЁЯТб ржЙржжрж╛рж╣рж░ржг:\n` +
    `${methodName === 'Binance Pay' ? 'тАв Binance Pay ID: 123456789' : 'тАв Payeer ID: P1234567890'}\n\n` +
    `тЪая╕П рж╕ржарж┐ржХ ID ржжрж┐ржи, ржнрзБрж▓ ID рждрзЗ ржЯрж╛ржХрж╛ ржкрж╛ржарж╛ржирзЛ рж╣рж▓рзЗ ржлрзЗрж░ржд ржкрж╛ржмрзЗржи ржирж╛!\n\n` +
    `ЁЯХР ржЕржирзБржорзЛржжржирзЗрж░ ржкрж░ рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржкрзЗржорзЗржирзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржмрзЗред`;

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'ЁЯФЩ Back', callback_data: 'withdraw' }],
        [{ text: 'тЭМ Cancel', callback_data: 'back_to_main' }]
      ]
    }
  };

  if (messageId) {
    bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      ...keyboard
    });
  } else {
    bot.sendMessage(chatId, message, keyboard);
  }
};

// Handle text messages for states
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id!;
  const text = msg.text;

  if (!text || text.startsWith('/') || text.startsWith('ЁЯСС')) return;
  if (!users[userId]) return;

  const userState = userStates[userId];
  
  try {
    // Handle deposit amount input
    if (userState === 'awaiting_deposit_amount_binance' || userState === 'awaiting_deposit_amount_payeer') {
      const amount = parseFloat(text);
      const method = userState.includes('binance') ? 'binance' : 'payeer';
      
      if (isNaN(amount) || amount < CONFIG.MIN_DEPOSIT || amount > CONFIG.MAX_DEPOSIT) {
        return bot.sendMessage(chatId, 
          `тЭМ ржнрзБрж▓ ржкрж░рж┐ржорж╛ржгред\n\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ${CONFIG.MIN_DEPOSIT} ржерзЗржХрзЗ ${CONFIG.MAX_DEPOSIT} ${CONFIG.CURRENCY} ржПрж░ ржоржзрзНржпрзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред\n\nЁЯТб ржЙржжрж╛рж╣рж░ржг: 10 ржЕржержмрж╛ 25.50`);
      }

      processDepositAmount(chatId, userId, amount, method);
    }

    // Handle withdrawal amount input
    else if (userState === 'awaiting_withdraw_amount_binance' || userState === 'awaiting_withdraw_amount_payeer') {
      const amount = parseFloat(text);
      const method = userState.includes('binance') ? 'binance' : 'payeer';
      
      if (isNaN(amount) || amount < CONFIG.MIN_WITHDRAW || amount > Math.min(CONFIG.MAX_WITHDRAW, users[userId].balance)) {
        return bot.sendMessage(chatId, 
          `тЭМ ржнрзБрж▓ ржкрж░рж┐ржорж╛ржгред\n\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ${CONFIG.MIN_WITHDRAW} ржерзЗржХрзЗ ${Math.min(CONFIG.MAX_WITHDRAW, users[userId].balance).toFixed(6)} ${CONFIG.CURRENCY} ржПрж░ ржоржзрзНржпрзЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред\n\nЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${users[userId].balance.toFixed(6)} ${CONFIG.CURRENCY}`);
      }

      processWithdrawAmount(chatId, userId, amount, method);
    }

    // Handle withdrawal ID input
    else if (userState && userState.startsWith('awaiting_withdraw_id_')) {
      const parts = userState.split('_');
      const method = parts[3] === 'binance' ? 'Binance Pay' : 'Payeer';
      const amount = parseFloat(parts[4]);
      const paymentId = text.trim();
      
      if (!paymentId || paymentId.length < 5) {
        return bot.sendMessage(chatId, 'тЭМ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ рж╕ржарж┐ржХ ржкрзЗржорзЗржирзНржЯ ID рж▓рж┐ржЦрзБржиред\n\nЁЯТб ржХржоржкржХрзНрж╖рзЗ рзл ржХрзНржпрж╛рж░рзЗржХрзНржЯрж╛рж░ рж▓ржорзНржмрж╛ рж╣рждрзЗ рж╣ржмрзЗред');
      }

      const withdrawalId = Date.now().toString();
      withdrawals[withdrawalId] = {
        id: withdrawalId,
        userId,
        amount,
        method,
        paymentId,
        status: 'pending',
        createdAt: new Date().toISOString()
      };

      users[userId].balance -= amount;
      delete userStates[userId];
      saveData();

      bot.sendMessage(chatId, 
        `тЬЕ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЖржмрзЗржжржи рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n` +
        `ЁЯТ░ ржкрж░рж┐ржорж╛ржг: ${amount} ${CONFIG.CURRENCY}\n` +
        `ЁЯТ│ ржкржжрзНржзрждрж┐: ${method}\n` +
        `ЁЯЖФ ржкрзЗржорзЗржирзНржЯ ID: ${paymentId}\n` +
        `ЁЯФЧ ржЖржмрзЗржжржи ID: ${withdrawalId}\n\n` +
        `тП│ ржПржбржорж┐ржи ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи\n` +
        `ЁЯХР рж╕рж╛ржзрж╛рж░ржгржд рзи-рзм ржШржирзНржЯрж╛ рж╕ржоржпрж╝ рж▓рж╛ржЧрзЗ\n\n` +
        `ЁЯУ▒ ржЕржирзБржорзЛржжржи рж╣рж▓рзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржмрзЗржи`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'ЁЯТ░ Balance', callback_data: 'balance' },
                { text: 'ЁЯПа Main Menu', callback_data: 'back_to_main' }
              ]
            ]
          }
        });
      
      // Notify admin with detailed info
      const user = users[userId];
      const adminNotification = `ЁЯПз ржирждрзБржи ржЙрждрзНрждрзЛрж▓ржи ржЖржмрзЗржжржи - ${CONFIG.BOT_NAME}\n\n` +
        `ЁЯСд ржЗржЙржЬрж╛рж░: ${user.firstName} (@${user.username || 'no username'})\n` +
        `ЁЯЖФ User ID: ${userId}\n` +
        `ЁЯТ░ ржкрж░рж┐ржорж╛ржг: ${amount} ${CONFIG.CURRENCY}\n` +
        `ЁЯТ│ ржкржжрзНржзрждрж┐: ${method}\n` +
        `ЁЯЖФ Payment ID: ${paymentId}\n` +
        `ЁЯФЧ Request ID: ${withdrawalId}\n` +
        `ЁЯТ░ ржЗржЙржЬрж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ (ржкрж░рзЗ): ${user.balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
        `ЁЯУИ ржорзЛржЯ ржЖржпрж╝: ${user.totalEarned.toFixed(6)} ${CONFIG.CURRENCY}\n` +
        `тЬЕ рж╕ржорзНржкржирзНржи ржЯрж╛рж╕рзНржХ: ${user.tasksCompleted}\n` +
        `ЁЯУЕ ржЖржмрзЗржжржирзЗрж░ рж╕ржоржпрж╝: ${new Date().toLocaleString('bn-BD')}`;
      
      bot.sendMessage(ADMIN_ID, adminNotification, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'тЬЕ APPROVE', callback_data: `approve_withdrawal_${withdrawalId}` },
              { text: 'тЭМ REJECT', callback_data: `reject_withdrawal_${withdrawalId}` }
            ],
            [
              { text: 'ЁЯСд User Info', callback_data: `user_info_${userId}` },
              { text: 'ЁЯУЛ Copy Payment ID', callback_data: `copy_payment_id_${withdrawalId}` }
            ]
          ]
        }
      });
    }

    // Handle deposit proof upload
    else if (userState && userState.startsWith('awaiting_deposit_proof_')) {
      const parts = userState.split('_');
      const method = parts[3] === 'binance' ? 'Binance Pay' : 'Payeer';
      const amount = parseFloat(parts[4]);
      
      const depositId = Date.now().toString();
      deposits[depositId] = {
        id: depositId,
        userId,
        amount,
        method,
        status: 'pending',
        createdAt: new Date().toISOString(),
        proof: msg.photo ? 'photo_provided' : 'text_provided'
      };

      delete userStates[userId];
      saveData();

      bot.sendMessage(chatId, 
        `тЬЕ ржЬржорж╛рж░ ржЖржмрзЗржжржи рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n\n` +
        `ЁЯТ░ ржкрж░рж┐ржорж╛ржг: ${amount} ${CONFIG.CURRENCY}\n` +
        `ЁЯТ│ ржкржжрзНржзрждрж┐: ${method}\n` +
        `ЁЯФЧ ржЖржмрзЗржжржи ID: ${depositId}\n\n` +
        `тП│ ржПржбржорж┐ржи ржпрж╛ржЪрж╛ржЗржпрж╝рзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи\n` +
        `ЁЯХР рж╕рж╛ржзрж╛рж░ржгржд рзл-рззрзл ржорж┐ржирж┐ржЯ рж╕ржоржпрж╝ рж▓рж╛ржЧрзЗ\n\n` +
        `ЁЯУ▒ ржЕржирзБржорзЛржжржи рж╣рж▓рзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржмрзЗржи`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'ЁЯТ░ Balance', callback_data: 'balance' },
                { text: 'ЁЯПа Main Menu', callback_data: 'back_to_main' }
              ]
            ]
          }
        });
      
      // Notify admin with detailed info
      const user = users[userId];
      const adminNotification = `ЁЯТ│ ржирждрзБржи ржЬржорж╛ ржЖржмрзЗржжржи - ${CONFIG.BOT_NAME}\n\n` +
        `ЁЯСд ржЗржЙржЬрж╛рж░: ${user.firstName} (@${user.username || 'no username'})\n` +
        `ЁЯЖФ User ID: ${userId}\n` +
        `ЁЯТ░ ржкрж░рж┐ржорж╛ржг: ${amount} ${CONFIG.CURRENCY}\n` +
        `ЁЯТ│ ржкржжрзНржзрждрж┐: ${method}\n` +
        `ЁЯФЧ Request ID: ${depositId}\n` +
        `ЁЯУ╕ ржкрзНрж░ржорж╛ржг: ${msg.photo ? 'рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ' : 'ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░ржорж╛ржг'}\n` +
        `ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${user.balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
        `ЁЯУИ ржорзЛржЯ ржЖржпрж╝: ${user.totalEarned.toFixed(6)} ${CONFIG.CURRENCY}\n` +
        `ЁЯУЕ ржЖржмрзЗржжржирзЗрж░ рж╕ржоржпрж╝: ${new Date().toLocaleString('bn-BD')}`;
      
      bot.sendMessage(ADMIN_ID, adminNotification, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'тЬЕ APPROVE', callback_data: `approve_deposit_${depositId}` },
              { text: 'тЭМ REJECT', callback_data: `reject_deposit_${depositId}` }
            ],
            [
              { text: 'ЁЯСд User Info', callback_data: `user_info_${userId}` },
              { text: 'ЁЯУЭ Custom Amount', callback_data: `custom_deposit_${depositId}` }
            ]
          ]
        }
      });
    }
  } catch (error) {
    console.error('Error handling message:', error);
    bot.sendMessage(chatId, 'тЭМ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ ржШржЯрзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред');
  }
});

// Handle photo messages (for deposit proof)
bot.on('photo', (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from?.id!;
  
  if (!users[userId]) return;
  
  const userState = userStates[userId];
  
  if (userState && userState.startsWith('awaiting_deposit_proof_')) {
    // Handle as deposit proof (same logic as text message)
    const parts = userState.split('_');
    const method = parts[3] === 'binance' ? 'Binance Pay' : 'Payeer';
    const amount = parseFloat(parts[4]);
    
    const depositId = Date.now().toString();
    deposits[depositId] = {
      id: depositId,
      userId,
      amount,
      method,
      status: 'pending',
      createdAt: new Date().toISOString(),
      proof: 'photo_provided',
      photoId: msg.photo[msg.photo.length - 1].file_id
    };

    delete userStates[userId];
    saveData();

    bot.sendMessage(chatId, 
      `тЬЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕рж╣ ржЬржорж╛рж░ ржЖржмрзЗржжржи рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛!\n\n` +
      `ЁЯТ░ ржкрж░рж┐ржорж╛ржг: ${amount} ${CONFIG.CURRENCY}\n` +
      `ЁЯТ│ ржкржжрзНржзрждрж┐: ${method}\n` +
      `ЁЯФЧ ржЖржмрзЗржжржи ID: ${depositId}\n\n` +
      `тП│ ржПржбржорж┐ржи ржпрж╛ржЪрж╛ржЗржпрж╝рзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи\n` +
      `ЁЯХР рж╕рж╛ржзрж╛рж░ржгржд рзл-рззрзл ржорж┐ржирж┐ржЯ рж╕ржоржпрж╝ рж▓рж╛ржЧрзЗ\n\n` +
      `ЁЯУ▒ ржЕржирзБржорзЛржжржи рж╣рж▓рзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржмрзЗржи`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'ЁЯТ░ Balance', callback_data: 'balance' },
              { text: 'ЁЯПа Main Menu', callback_data: 'back_to_main' }
            ]
          ]
        }
      });
    
    // Forward photo to admin with details
    const user = users[userId];
    const adminNotification = `ЁЯТ│ ржирждрзБржи ржЬржорж╛ (рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕рж╣) - ${CONFIG.BOT_NAME}\n\n` +
      `ЁЯСд ржЗржЙржЬрж╛рж░: ${user.firstName} (@${user.username || 'no username'})\n` +
      `ЁЯЖФ User ID: ${userId}\n` +
      `ЁЯТ░ ржкрж░рж┐ржорж╛ржг: ${amount} ${CONFIG.CURRENCY}\n` +
      `ЁЯТ│ ржкржжрзНржзрждрж┐: ${method}\n` +
      `ЁЯФЧ Request ID: ${depositId}\n` +
      `ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: ${user.balance.toFixed(6)} ${CONFIG.CURRENCY}\n` +
      `ЁЯУЕ ржЖржмрзЗржжржирзЗрж░ рж╕ржоржпрж╝: ${new Date().toLocaleString('bn-BD')}`;
    
    // First forward the photo
    bot.forwardMessage(ADMIN_ID, chatId, msg.message_id);
    
    // Then send the details with buttons
    bot.sendMessage(ADMIN_ID, adminNotification, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'тЬЕ APPROVE', callback_data: `approve_deposit_${depositId}` },
            { text: 'тЭМ REJECT', callback_data: `reject_deposit_${depositId}` }
          ],
          [
            { text: 'ЁЯСд User Info', callback_data: `user_info_${userId}` },
            { text: 'ЁЯУЭ Custom Amount', callback_data: `custom_deposit_${depositId}` }
          ]
        ]
      }
    });
  }
});

// Error handling
bot.on('polling_error', (error) => {
  console.log('Polling error:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.log('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.log('Uncaught Exception:', error);
});

// Initialize
loadData();

console.log(`ЁЯдЦ ${CONFIG.BOT_NAME} Bot started successfully!`);
console.log(`Bot: ${CONFIG.BOT_USERNAME}`);
console.log(`Admin ID: ${ADMIN_ID}`);
console.log(`Required Channels: ${REQUIRED_CHANNELS.join(', ')}`);
console.log(`Min CPC: ${CONFIG.MIN_CPC} ${CONFIG.CURRENCY}`);
console.log(`Max CPC: ${CONFIG.MAX_CPC} ${CONFIG.CURRENCY}`);
console.log(`Referral Bonus: ${CONFIG.REF_BONUS} ${CONFIG.CURRENCY}`);
console.log(`Min Deposit: ${CONFIG.MIN_DEPOSIT} ${CONFIG.CURRENCY}`);
console.log(`Min Withdraw: ${CONFIG.MIN_WITHDRAW} ${CONFIG.CURRENCY}`);
